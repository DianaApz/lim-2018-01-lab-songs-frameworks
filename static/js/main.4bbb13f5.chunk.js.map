{"version":3,"sources":["songs.js","list.js","App.js","serviceWorker.js","index.js"],"names":["Song","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","song","state","number","like","bind","assertThisInitialized","dislike","setState","react_default","a","createElement","className","onClick","Component","ListMusic","name","image","listSongs","console","log","src","alt","map","ele","songs","key","playcount","App","artist","url","apiKey","codeNct","concat","codeNsync","codeBts","_this2","answer","Promise","all","fetch","then","res","json","resp","catch","e","_this3","art","list","toptracks","track","total","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4bbb13f5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Song extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // console.log(props);\r\n        this.song = props.song\r\n        this.state = {\r\n            number: 0\r\n        }\r\n        this.like = this.like.bind(this);\r\n        this.dislike = this.dislike.bind(this);\r\n    }\r\n    like() {\r\n        this.setState({\r\n            number: this.state.number + 1\r\n        });\r\n    }\r\n\r\n    dislike() {\r\n        if (this.state.number > 0) {\r\n            this.setState({\r\n                number: this.state.number - 1\r\n            })\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <p>{this.song}<span>{this.state.number}</span><button className=\"btn\" onClick={this.like}>like</button>\r\n                <button className=\"btn\" onClick={this.dislike}>dislike</button></p>\r\n        )\r\n    }\r\n}\r\nexport default Song","import React, { Component } from 'react';\r\nimport Song from './songs';\r\n\r\nclass ListMusic extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.name = props.name;\r\n        this.image = props.image;\r\n        this.listSongs = props.listSongs;\r\n        console.log(props);\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n\r\n                <p>{this.name}</p>\r\n                <img src={this.image} alt='img'/>\r\n                {/* <p>{this.listSongs}</p> */}\r\n                <div>{this.listSongs.map(ele => {\r\n                    // console.log(ele)\r\n                    return (\r\n                        <Song\r\n                            song={ele.name}\r\n                            key={ele.playcount}\r\n                        />\r\n                    )\r\n                })\r\n                }</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default ListMusic","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport ListMusic from './list';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      artist:[]\r\n    }\r\n    this.url = 'http://ws.audioscrobbler.com/2.0/?';\r\n    this.apiKey = '249a58095b144df61f95be44d013c3d6';\r\n    this.codeNct = `${this.url}method=artist.gettoptracks&artist=NCT&api_key=${this.apiKey}&limit=10&format=json`\r\n    this.codeNsync = `${this.url}method=artist.gettoptracks&artist=NSYNC&api_key=${this.apiKey}&limit=10&format=json`\r\n    this.codeBts = `${this.url}method=artist.gettoptracks&artist=BTS&api_key=${this.apiKey}&limit=10&format=json`   \r\n  }\r\n  componentWillMount() {\r\n    let answer = this.state.artist\r\n    Promise.all([fetch(this.codeNsync).then(res => res.json()), fetch(this.codeNct).then(res => res.json())])\r\n      .then(resp => {\r\n        answer=resp\r\n        this.setState({\r\n          artist: answer\r\n        })\r\n      })\r\n      .catch(e => console.log('er'))\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n          <h2>Ranking</h2>\r\n        </header>\r\n        <div className=\"App-intro\">\r\n          <div>\r\n            {this.state.artist.map(art => {  \r\n               return (<ListMusic \r\n                all={this.state.artist}\r\n                listSongs={art.toptracks.track}\r\n                name={art.toptracks[\"@attr\"].artist}\r\n                image={art.toptracks.track[0].image[3][\"#text\"]}\r\n                key={art.toptracks[\"@attr\"].total}\r\n              />);\r\n            })\r\n            }           \r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}